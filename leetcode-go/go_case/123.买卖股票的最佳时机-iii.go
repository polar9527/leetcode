/*
 * @lc app=leetcode.cn id=123 lang=golang
 *
 * [123] 买卖股票的最佳时机 III
 *
 * https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/description/
 *
 * algorithms
 * Hard (61.83%)
 * Likes:    1818
 * Dislikes: 0
 * Total Accepted:    401.3K
 * Total Submissions: 648.3K
 * Testcase Example:  '[3,3,5,0,0,3,1,4]'
 *
 * 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
 *
 * 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。
 *
 * 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 *
 *
 *
 * 示例 1:
 *
 *
 * 输入：prices = [3,3,5,0,0,3,1,4]
 * 输出：6
 * 解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
 * 随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
 *
 * 示例 2：
 *
 *
 * 输入：prices = [1,2,3,4,5]
 * 输出：4
 * 解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4
 * 。
 * 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
 * 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
 *
 *
 * 示例 3：
 *
 *
 * 输入：prices = [7,6,4,3,1]
 * 输出：0
 * 解释：在这个情况下, 没有交易完成, 所以最大利润为 0。
 *
 * 示例 4：
 *
 *
 * 输入：prices = [1]
 * 输出：0
 *
 *
 *
 *
 * 提示：
 *
 *
 * 1
 * 0
 *
 *
 */

// @lc code=start
func maxProfit(prices []int) int {
	l := len(prices)
	if l == 1 {
		return 0
	}
	dp := make([][5]int, l)
	// 从未持有过
	// dp[i][0]
	// 第一次持有
	// dp[i][1]
	// 第一次不持有
	// dp[i][2]
	// 第二次持有
	// dp[i][3]
	// 第二次不持有
	// dp[i][4]

	dp[0][0] = 0
	dp[0][1] = -prices[0]
	dp[0][2] = 0
	dp[0][3] = -prices[0]
	dp[0][4] = 0

	for i := 1; i < len(prices); i++ {
		// 从来没持有过
		dp[i][0] = dp[i-1][0]
		// 第一次持有，第一次买股票或者已经是第一次买了股票， i-1 的时候 就第一次持有， i-1 的时候从来就没有持有过
		dp[i][1] = max(dp[i-1][1], dp[i-1][0]-prices[i])
		// 第一次不持有，第一次卖掉了或者已经卖掉了股票， i-1的时候就已经是不持有股票的，i-1的时候刚好第一次卖掉了持有的股票
		dp[i][2] = max(dp[i-1][2], dp[i-1][1]+prices[i])
		// 第二次持有，
		dp[i][3] = max(dp[i-1][3], dp[i-1][2]-prices[i])
		// 第二次不持有
		dp[i][4] = max(dp[i-1][4], dp[i-1][3]+prices[i])
	}

	return dp[l-1][4]
}

// @lc code=end

